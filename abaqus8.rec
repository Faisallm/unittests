# -*- coding: mbcs -*-
from assembly import *
from part import *
from sketch import *
from material import *
from section import *
from step import *
from mesh import *
from job import *
from visualization import *
mdb.models.changeKey(fromName='Model-1', toName='SingleElementModel')
mdb.models['SingleElementModel'].Part(dimensionality=THREE_D, name=
    'SingleElementModel_Part', type=DEFORMABLE_BODY)
mdb.models['SingleElementModel'].ConstrainedSketch(name=
    'SingleElementModel_Sketch', sheetSize=2.0)
mdb.models['SingleElementModel'].sketches['SingleElementModel_Sketch'].rectangle(
    point1=(0.0, 0.0), point2=(1.0, 1.0))
mdb.models['SingleElementModel'].parts['SingleElementModel_Part'].BaseSolidExtrude(
    depth=1.0, sketch=
    mdb.models['SingleElementModel'].sketches['SingleElementModel_Sketch'])
mdb.models['SingleElementModel'].Material(name='material')
mdb.models['SingleElementModel'].materials['material'].Density(table=((7872, ), 
    ))
mdb.models['SingleElementModel'].materials['material'].Elastic(table=((
    200000000000.0, 0.29), ))
mdb.models['SingleElementModel'].HomogeneousSolidSection(material='material', 
    name='SingleElementModel_Section')
mdb.models['SingleElementModel'].parts['SingleElementModel_Part'].SectionAssignment(
    region=Region(
    cells=mdb.models['SingleElementModel'].parts['SingleElementModel_Part'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='SingleElementModel_Section')
mdb.models['SingleElementModel'].rootAssembly.regenerate()
mdb.models['SingleElementModel'].rootAssembly.Instance(dependent=ON, name=
    'SingleElementModel_Instance', part=
    mdb.models['SingleElementModel'].parts['SingleElementModel_Part'])
mdb.models['SingleElementModel'].StaticStep(description=
    'SingleElementModel_Apply controlled displacement in this step', name=
    'SingleElementModel_Displacement_Step', previous='Initial')
mdb.models['SingleElementModel'].fieldOutputRequests.changeKey(fromName=
    'F-Output-1', toName='SingleElementModel_field_output_requests')
mdb.models['SingleElementModel'].fieldOutputRequests['SingleElementModel_field_output_requests'].setValues(
    variables=('S', 'E', 'U', 'RF'))
mdb.models['SingleElementModel'].HistoryOutputRequest(createStepName=
    'SingleElementModel_Displacement_Step', name='Default History Outputs', 
    variables=PRESELECT)
del mdb.models['SingleElementModel'].historyOutputRequests['H-Output-1']
mdb.models['SingleElementModel'].DisplacementBC(createStepName='Initial', 
    distributionType=UNIFORM, name='SingleElementModel_FixedFace', region=
    Region(
    faces=mdb.models['SingleElementModel'].rootAssembly.instances['SingleElementModel_Instance'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), u1=0.0, u2=UNSET, u3=0.0)
mdb.models['SingleElementModel'].TabularAmplitude(data=((0.0, 0.0), (1.0, 1.0))
    , name='SingleElementModel_DisplacementAmp', timeSpan=STEP)
mdb.models['SingleElementModel'].DisplacementBC(amplitude=
    'SingleElementModel_DisplacementAmp', createStepName=
    'SingleElementModel_Displacement_Step', distributionType=UNIFORM, 
    localCsys=None, name='SingleElementModel_DisplacementEdge', region=Region(
    faces=mdb.models['SingleElementModel'].rootAssembly.instances['SingleElementModel_Instance'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), u1=0.001, u2=UNSET, u3=UNSET)
mdb.models['SingleElementModel'].parts['SingleElementModel_Part'].setElementType(
    elemTypes=(ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ), regions=
    Region(
    cells=mdb.models['SingleElementModel'].parts['SingleElementModel_Part'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['SingleElementModel'].parts['SingleElementModel_Part'].seedPart(
    deviationFactor=(0.1, ), size=1.0)
#* TypeError: deviationFactor; found tuple, expecting float
